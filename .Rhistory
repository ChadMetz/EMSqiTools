knitr::opts_chunk$set(echo = TRUE)
library(DBI)
library(odbc)
con <- dbConnect(odbc::odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = "uhqdbsql01",
Database = "Imagetrend",
UID = "cmetz",
PWD = "JM#i#oRRl2WgE@@7",
Port = 1433)
query <- "
SELECT
[Incident_Patient_Care_Report_Number] AS 'PCR Number',
[Response_EMS_Response_Number] AS 'Incident Number',
FORMAT([Dim_Incident].[Incident_Unit_Notified_By_Dispatch_Date_Time], 'MM-dd-yyyy') AS 'Call Date',
YEAR([Incident_Unit_Notified_By_Dispatch_Date_Time]) AS 'Year',
MONTH([Incident_Unit_Notified_By_Dispatch_Date_Time]) AS 'Month',
CASE
WHEN MONTH([Incident_Unit_Notified_By_Dispatch_Date_Time]) IN (1, 2, 3) THEN 1
WHEN MONTH([Incident_Unit_Notified_By_Dispatch_Date_Time]) IN (4, 5, 6) THEN 2
WHEN MONTH([Incident_Unit_Notified_By_Dispatch_Date_Time]) IN (7, 8, 9) THEN 3
WHEN MONTH([Incident_Unit_Notified_By_Dispatch_Date_Time]) IN (10, 11, 12) THEN 4
END AS 'Quarter',
DATEPART(WEEK, [Incident_Unit_Notified_By_Dispatch_Date_Time]) AS 'Week_of_Year',
DATEDIFF(MINUTE, [Incident_Unit_Back_In_Service_Date_Time], [Incident_Marked_As_Finished_Date_Time]) AS TimeDifferenceInMinutes,
CASE
WHEN DATEDIFF(MINUTE, [Incident_Unit_Back_In_Service_Date_Time], [Incident_Marked_As_Finished_Date_Time]) < 60 THEN 'Under 1 hour'
WHEN DATEDIFF(MINUTE, [Incident_Unit_Back_In_Service_Date_Time], [Incident_Marked_As_Finished_Date_Time]) < 120 THEN 'Under 2 hours'
WHEN DATEDIFF(MINUTE, [Incident_Unit_Back_In_Service_Date_Time], [Incident_Marked_As_Finished_Date_Time]) < 240 THEN 'Under 4 hours'
WHEN DATEDIFF(MINUTE, [Incident_Unit_Back_In_Service_Date_Time], [Incident_Marked_As_Finished_Date_Time]) < 360 THEN 'Under 6 hours'
WHEN DATEDIFF(MINUTE, [Incident_Unit_Back_In_Service_Date_Time], [Incident_Marked_As_Finished_Date_Time]) < 480 THEN 'Under 8 hours'
WHEN DATEDIFF(MINUTE, [Incident_Unit_Back_In_Service_Date_Time], [Incident_Marked_As_Finished_Date_Time]) < 600 THEN 'Under 10 hours'
WHEN DATEDIFF(MINUTE, [Incident_Unit_Back_In_Service_Date_Time], [Incident_Marked_As_Finished_Date_Time]) < 720 THEN 'Under 12 hours'
ELSE '12 hours or more'
END AS TimeToFinishCategory
FROM [Imagetrend].[DwEms].[Fact_Incident]
LEFT JOIN [Imagetrend].[DwEms].[Dim_Incident] ON [Fact_Incident].[Dim_Incident_FK] = [Dim_Incident].[Dim_Incident_PK]
LEFT JOIN [Imagetrend].[DwEms].[Dim_Response] ON [Fact_Incident].[Dim_Response_FK] = [Dim_Response].[Dim_Response_PK]
LEFT JOIN [Imagetrend].[DwEms].[Dim_Situation] ON [Fact_Incident].[Dim_Situation_FK] = [Dim_Situation].[Dim_Situation_PK]
LEFT JOIN [Imagetrend].[DwEms].[Dim_Patient] ON [Fact_Incident].[Dim_Patient_FK] = [Dim_Patient].[Dim_Patient_PK]
LEFT JOIN [Imagetrend].[DwEms].[Dim_Incident_One_To_One]  ON [Fact_Incident].[Dim_Incident_One_To_One_PK] = [Dim_Incident_One_To_One].[Dim_Incident_One_To_One_PK]
WHERE [Response_EMS_Agency_Number] = '183032'
AND [Incident_Unit_Notified_By_Dispatch_Date_Time] > '2024-09-04 07:30:00';
"
df2 <- dbGetQuery(con, query)
View(df2)
library(dplyr)
library(ggplot2)
library(lubridate)
mean(df2$TimeDifferenceInMinutes)
# Aggregate by Year and Week
dataset_summary <- df2 %>%
group_by(Year, Week_of_Year) %>%
summarise(
Total_Incidents = n_distinct(`PCR Number`),
Vitals_Taken_1 = sum(TimeToFinishCategory == "Under 1 hour", na.rm = TRUE)
) %>%
mutate(
p = ifelse(Total_Incidents > 0, Vitals_Taken_1 / Total_Incidents, NA),
Week_Date = as.Date(paste0(Year, "-01-01")) + weeks(Week_of_Year - 1)
)
# Calculate initial control limits (mean-based)
initial_CL <- mean(dataset_summary$p, na.rm = TRUE)
dataset_summary <- dataset_summary %>%
mutate(
CL = initial_CL,
UCL = pmin(CL + 2 * sqrt((CL * (1 - CL)) / Total_Incidents), 1),
LCL = pmax(CL - 2 * sqrt((CL * (1 - CL)) / Total_Incidents), 0)
)
# Replace NA p with 0 for continuity
dataset_summary$p[is.na(dataset_summary$p)] <- 0
# Detect shift: 8+ consecutive points above initial CL
run_length <- rle(dataset_summary$p > initial_CL)
shift_index <- which(run_length$values & run_length$lengths >= 8)
if (length(shift_index) > 0) {
shift_start <- sum(run_length$lengths[seq_len(shift_index[1] - 1)]) + 1
# Recalculate CL, UCL, LCL after shift
new_CL <- mean(dataset_summary$p[shift_start:nrow(dataset_summary)], na.rm = TRUE)
pre_shift <- dataset_summary[1:(shift_start - 1), ] %>%
mutate(CL_adj = CL,
UCL_adj = UCL,
LCL_adj = LCL)
post_shift <- dataset_summary[shift_start:nrow(dataset_summary), ] %>%
mutate(CL_adj = new_CL,
UCL_adj = pmin(new_CL + 2 * sqrt((new_CL * (1 - new_CL)) / Total_Incidents), 1),
LCL_adj = pmax(new_CL - 2 * sqrt((new_CL * (1 - new_CL)) / Total_Incidents), 0))
dataset_summary <- bind_rows(pre_shift, post_shift)
shift_date <- dataset_summary$Week_Date[shift_start]
annotations <- data.frame(
Date = c(as.Date("2024-09-01"), shift_date),
Label = c("ImageTrend Go Live", "Shift Detected"),
Y_Pos = c(0.1, 0.15),
X_Adjust = c(as.Date("2024-09-05"), shift_date + 5),
Color = c("purple", "red")
)
} else {
dataset_summary <- dataset_summary %>%
mutate(CL_adj = CL, UCL_adj = UCL, LCL_adj = LCL)
annotations <- data.frame(
Date = as.Date(c("2024-09-01")),
Label = c("ImageTrend Go Live"),
Y_Pos = c(0.1),
X_Adjust = as.Date(c("2024-09-05")),
Color = c("purple")
)
}
# Step control limits
dataset_step <- dataset_summary %>%
select(Week_Date, UCL_adj, LCL_adj) %>%
mutate(Week_Date = Week_Date - 3)
dataset_step <- rbind(dataset_step, dataset_step[nrow(dataset_step), ])
dataset_step$Week_Date[nrow(dataset_step)] <- max(dataset_summary$Week_Date)
# Prepare CL annotations for left and right sides
first_date <- min(dataset_summary$Week_Date)
last_date <- max(dataset_summary$Week_Date)
cl_left_label <- dataset_summary %>%
filter(Week_Date == first_date) %>%
select(CL) %>%
distinct() %>%
mutate(
Week_Date = first_date - 40,  # moved even further left
Label = paste0("CL = ", scales::percent(CL, accuracy = 1)),
CL_adj = CL
)
cl_right_label <- dataset_summary %>%
filter(Week_Date == last_date) %>%
select(CL_adj) %>%
distinct() %>%
mutate(
Week_Date = last_date + 5,  # right side
Label = paste0("CL = ", scales::percent(CL_adj, accuracy = 1))
)
cl_labels <- bind_rows(cl_left_label, cl_right_label)
# Plot
p <- ggplot(dataset_summary, aes(x = Week_Date, y = p)) +
geom_line(linewidth = 1, color = "black") +
geom_point(size = 2, color = "black") +
geom_step(data = dataset_step, aes(x = Week_Date, y = UCL_adj), linetype = "dotted", color = "red", linewidth = 1) +
geom_step(data = dataset_step, aes(x = Week_Date, y = LCL_adj), linetype = "dotted", color = "red", linewidth = 1) +
geom_line(aes(y = CL_adj), color = "blue", linewidth = 1) +
geom_segment(data = annotations,
aes(x = Date, xend = Date, y = 0, yend = 0.7, color = Color),
linetype = "dashed", linewidth = 1) +
geom_text(data = annotations,
aes(x = X_Adjust, y = pmax(0.05, Y_Pos), label = Label, color = Color),
angle = 0, vjust = -1, hjust = 0, size = 4, show.legend = FALSE) +
geom_text(data = cl_labels,
aes(x = Week_Date, y = CL_adj, label = Label),
color = "blue", hjust = c(-0.2, 0), vjust = 0.5, size = 4) +  # left label right-aligned, right label left-aligned
scale_color_identity() +
labs(
title = "Proportion of patient care reports marked as finished within one hour of returning to service",
x = "Week",
y = "Proportion"
) +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month", expand = expansion(mult = c(0.0001, 0.1))) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0, 1)) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")
)
# Display plot
print(p)
mean(df2$TimeDifferenceInMinutes, na.rm = TRUE)
df_filtered <- df2 %>%
filter(TimeToFinishCategory != "12 hours or more")
mean(TimeDifferenceInMinutes, na.rm = TRUE)
df_filtered <- df2 %>%
filter(TimeToFinishCategory != "12 hours or more") %>%
mean(TimeDifferenceInMinutes, na.rm = TRUE)
df_filtered <- df2 %>%
filter(TimeToFinishCategory != "12 hours or more") %>%
summarise(mean_time = mean(TimeDifferenceInMinutes, na.rm = TRUE))
df_filtered <- df2 %>%
filter(TimeToFinishCategory != "12 hours or more") %>%
summarise(mean_time = mean(TimeDifferenceInMinutes, na.rm = TRUE))
print(df_filtered)
library(dplyr)
library(lubridate)
df2 <- df2 %>%
mutate(
Call_Date = dmy(Call_Date),  # convert from "dd-mm-yyyy" to Date
Month = floor_date(Call_Date, unit = "month")  # extract month as first day of month
) %>%
group_by(Month) %>%
summarise(
AvgTime = mean(TimeDifferenceInMinutes, na.rm = TRUE),
Count = n()
)
library(dplyr)
library(lubridate)
df2 <- df2 %>%
mutate(
Call_Date = dmy('Call Date'),  # convert from "dd-mm-yyyy" to Date
Month = floor_date('Call Date', unit = "month")  # extract month as first day of month
) %>%
group_by(Month) %>%
summarise(
AvgTime = mean(TimeDifferenceInMinutes, na.rm = TRUE),
Count = n()
)
library(dplyr)
library(lubridate)
df2 <- df2 %>%
mutate(
Call_Date = dmy(`Call Date`),  # Convert string column to Date
Month = floor_date(Call_Date, unit = "month")  # Extract month for grouping
) %>%
group_by(Month) %>%
summarise(
AvgTime = mean(TimeDifferenceInMinutes, na.rm = TRUE),
Count = n()
)
print(df2)
library(dplyr)
library(lubridate)
df_filtered_monthly <- df2 %>%
filter(TimeToFinishCategory != "12 hours or more") %>%                # Your filter
mutate(
Call_Date = dmy(`Call Date`),                                      # Parse "dd-mm-yyyy" date
Month = floor_date(Call_Date, unit = "month")                      # Extract first day of each month
) %>%
group_by(Month) %>%
summarise(
AvgTime = mean(TimeDifferenceInMinutes, na.rm = TRUE),             # Mean time per month
Count = n(),                                                       # Optional: number of cases
.groups = "drop"                                                   # Optional: drops grouping after summarise
)
library(dplyr)
library(lubridate)
df2 <- df2 %>%
filter(TimeToFinishCategory != "12 hours or more") %>%                # Your filter
mutate(
Call_Date = dmy(`Call Date`),                                      # Parse "dd-mm-yyyy" date
Month = floor_date(Call_Date, unit = "month")                      # Extract first day of each month
) %>%
group_by(Month) %>%
summarise(
AvgTime = mean(TimeDifferenceInMinutes, na.rm = TRUE),             # Mean time per month
Count = n(),                                                       # Optional: number of cases
.groups = "drop"                                                   # Optional: drops grouping after summarise
)
query <- "
SELECT
[Incident_Patient_Care_Report_Number] AS 'PCR Number',
[Response_EMS_Response_Number] AS 'Incident Number',
FORMAT([Dim_Incident].[Incident_Unit_Notified_By_Dispatch_Date_Time], 'MM-dd-yyyy') AS 'Call Date',
YEAR([Incident_Unit_Notified_By_Dispatch_Date_Time]) AS 'Year',
MONTH([Incident_Unit_Notified_By_Dispatch_Date_Time]) AS 'Month',
CASE
WHEN MONTH([Incident_Unit_Notified_By_Dispatch_Date_Time]) IN (1, 2, 3) THEN 1
WHEN MONTH([Incident_Unit_Notified_By_Dispatch_Date_Time]) IN (4, 5, 6) THEN 2
WHEN MONTH([Incident_Unit_Notified_By_Dispatch_Date_Time]) IN (7, 8, 9) THEN 3
WHEN MONTH([Incident_Unit_Notified_By_Dispatch_Date_Time]) IN (10, 11, 12) THEN 4
END AS 'Quarter',
DATEPART(WEEK, [Incident_Unit_Notified_By_Dispatch_Date_Time]) AS 'Week_of_Year',
DATEDIFF(MINUTE, [Incident_Unit_Back_In_Service_Date_Time], [Incident_Marked_As_Finished_Date_Time]) AS TimeDifferenceInMinutes,
CASE
WHEN DATEDIFF(MINUTE, [Incident_Unit_Back_In_Service_Date_Time], [Incident_Marked_As_Finished_Date_Time]) < 60 THEN 'Under 1 hour'
WHEN DATEDIFF(MINUTE, [Incident_Unit_Back_In_Service_Date_Time], [Incident_Marked_As_Finished_Date_Time]) < 120 THEN 'Under 2 hours'
WHEN DATEDIFF(MINUTE, [Incident_Unit_Back_In_Service_Date_Time], [Incident_Marked_As_Finished_Date_Time]) < 240 THEN 'Under 4 hours'
WHEN DATEDIFF(MINUTE, [Incident_Unit_Back_In_Service_Date_Time], [Incident_Marked_As_Finished_Date_Time]) < 360 THEN 'Under 6 hours'
WHEN DATEDIFF(MINUTE, [Incident_Unit_Back_In_Service_Date_Time], [Incident_Marked_As_Finished_Date_Time]) < 480 THEN 'Under 8 hours'
WHEN DATEDIFF(MINUTE, [Incident_Unit_Back_In_Service_Date_Time], [Incident_Marked_As_Finished_Date_Time]) < 600 THEN 'Under 10 hours'
WHEN DATEDIFF(MINUTE, [Incident_Unit_Back_In_Service_Date_Time], [Incident_Marked_As_Finished_Date_Time]) < 720 THEN 'Under 12 hours'
ELSE '12 hours or more'
END AS TimeToFinishCategory
FROM [Imagetrend].[DwEms].[Fact_Incident]
LEFT JOIN [Imagetrend].[DwEms].[Dim_Incident] ON [Fact_Incident].[Dim_Incident_FK] = [Dim_Incident].[Dim_Incident_PK]
LEFT JOIN [Imagetrend].[DwEms].[Dim_Response] ON [Fact_Incident].[Dim_Response_FK] = [Dim_Response].[Dim_Response_PK]
LEFT JOIN [Imagetrend].[DwEms].[Dim_Situation] ON [Fact_Incident].[Dim_Situation_FK] = [Dim_Situation].[Dim_Situation_PK]
LEFT JOIN [Imagetrend].[DwEms].[Dim_Patient] ON [Fact_Incident].[Dim_Patient_FK] = [Dim_Patient].[Dim_Patient_PK]
LEFT JOIN [Imagetrend].[DwEms].[Dim_Incident_One_To_One]  ON [Fact_Incident].[Dim_Incident_One_To_One_PK] = [Dim_Incident_One_To_One].[Dim_Incident_One_To_One_PK]
WHERE [Response_EMS_Agency_Number] = '183032'
AND [Incident_Unit_Notified_By_Dispatch_Date_Time] > '2024-09-04 07:30:00';
"
df2 <- dbGetQuery(con, query)
View(df2)
library(dplyr)
library(lubridate)
df3 <- df2 %>%
filter(TimeToFinishCategory != "12 hours or more") %>%                # Your filter
mutate(
Call_Date = dmy(`Call Date`),                                      # Parse "dd-mm-yyyy" date
Month = floor_date(Call_Date, unit = "month")                      # Extract first day of each month
) %>%
group_by(Month) %>%
summarise(
AvgTime = mean(TimeDifferenceInMinutes, na.rm = TRUE),             # Mean time per month
Count = n(),                                                       # Optional: number of cases
.groups = "drop"                                                   # Optional: drops grouping after summarise
)
print(df3)
library(dplyr)
library(lubridate)
df3 <- df2 %>%
filter(TimeToFinishCategory != "12 hours or more") %>%                # Your filter
group_by(Year, Month) %>%
summarise(
AvgTime = mean(TimeDifferenceInMinutes, na.rm = TRUE),             # Mean time per month
Count = n(),                                                       # Optional: number of cases
.groups = "drop"                                                   # Optional: drops grouping after summarise
)
print(df3)
library(dplyr)
library(lubridate)
df3 <- df2 %>%
filter(TimeDifferenceInMinutes < 240) %>%                # Your filter
group_by(Year, Month) %>%
summarise(
AvgTime = mean(TimeDifferenceInMinutes, na.rm = TRUE),             # Mean time per month
Count = n(),                                                       # Optional: number of cases
.groups = "drop"                                                   # Optional: drops grouping after summarise
)
print(df3)
